package main

import (
	"CourseTg/config"
	"CourseTg/internal/handlers"
	"CourseTg/webhook"
	"encoding/json"
	"log"
	"net/http"
	"os"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
)

func main() {
	cfg := config.LoadConfig()

	bot, err := tgbotapi.NewBotAPI(cfg.TelegramToken)
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞:", err)
	}
	bot.Debug = true
	log.Printf("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ %s", bot.Self.UserName)

	// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ Telegram
	webhookURL := "https://bot-tg-go.onrender.com"
	_, err = bot.SetWebhook(tgbotapi.NewWebhook(webhookURL))
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞:", err)
	}

	// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Telegram
	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		if r.Method == http.MethodPost {
			var update tgbotapi.Update
			if err := json.NewDecoder(r.Body).Decode(&update); err != nil {
				http.Error(w, "Bad request", http.StatusBadRequest)
				return
			}
			handlers.HandleUpdates(bot, update)
			w.WriteHeader(http.StatusOK)
		} else {
			http.Error(w, "Invalid method", http.StatusMethodNotAllowed)
		}
	})

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∏–Ω–≥–∞
	http.HandleFunc("/ping", func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("pong"))
	})

	// –í–µ–±—Ö—É–∫ –æ—Ç –ÆKassa
	http.HandleFunc("/webhook/yookassa", webhook.HandleYooKassaWebhook)

	// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –ø–∏–Ω–≥, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞—Å—ã–ø–∞–ª
	go func() {
		for {
			resp, err := http.Get("https://bot-tg-go.onrender.com/ping")
			if err != nil {
				log.Println("üîÅ –û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞:", err)
			} else {
				log.Println("‚úÖ –°–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω (ping)")
				resp.Body.Close()
			}
			time.Sleep(1 * time.Minute)
		}
	}()

	port := os.Getenv("PORT")
	if port == "" {
		port = "8080"
	}

	log.Printf("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É %s", port)
	log.Fatal(http.ListenAndServe(":"+port, nil))
}
