package webhook

import (
	"CourseTg/config"
	"encoding/json"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"strconv"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
)

type YooKassaNotification struct {
	Event  string `json:"event"`
	Object struct {
		Status   string `json:"status"`
		Metadata struct {
			TelegramID string `json:"telegram_id"`
		} `json:"metadata"`
	} `json:"object"`
}

func HandleYooKassaWebhook(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		http.Error(w, "–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", http.StatusMethodNotAllowed)
		return
	}

	var notification YooKassaNotification
	if err := json.NewDecoder(r.Body).Decode(&notification); err != nil {
		http.Error(w, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON", http.StatusBadRequest)
		return
	}

	if notification.Event == "payment.succeeded" && notification.Object.Status == "succeeded" {
		log.Printf("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ –¥–ª—è %s", notification.Object.Metadata.TelegramID)
		go sendPDF(notification.Object.Metadata.TelegramID)
	}

	w.WriteHeader(http.StatusOK)
	w.Write([]byte("OK"))
}

func sendPDF(telegramID string) {
	cfg := config.LoadConfig()
	bot, err := tgbotapi.NewBotAPI(cfg.TelegramToken)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: %v", err)
		return
	}

	userID, err := strconv.ParseInt(telegramID, 10, 64)
	if err != nil {
		log.Printf("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π Telegram ID: %v", err)
		return
	}

	// –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ PDF (–Ω–∞ Render PDF –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä—è–¥–æ–º —Å –±–∏–Ω–∞—Ä–Ω–∏–∫–æ–º –∏–ª–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –ø–∞–ø–∫–µ)
	pdfPath := filepath.Join("files", "guide.pdf") // –ü–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è –ø–∞–ø–∫–∞ /files –∏ —Ñ–∞–π–ª guide.pdf

	fileBytes, err := os.ReadFile(pdfPath)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è PDF: %v", err)
		return
	}

	doc := tgbotapi.FileBytes{
		Name:  "guide.pdf",
		Bytes: fileBytes,
	}

	msg := tgbotapi.NewDocumentUpload(userID, doc)
	_, err = bot.Send(msg)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF: %v", err)
	} else {
		log.Printf("üìÑ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d", userID)
	}
}
