package handlers

import (
	"CourseTg/config"
	"CourseTg/internal/payment"
	"fmt"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
)

type UserState struct {
	Step           string
	SelectedCourse string
	Amount         string
	Description    string
	Name           string
	Email          string
}

var processedUpdates = make(map[int]bool)
var UserStates = make(map[int64]*UserState)

func HandleUpdates(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	if processedUpdates[update.UpdateID] {
		return
	}
	processedUpdates[update.UpdateID] = true

	if update.Message != nil {
		chatID := update.Message.Chat.ID

		state, exists := UserStates[chatID]
		if exists {
			switch state.Step {
			case "wait_name":
				state.Name = update.Message.Text
				state.Step = "wait_email"
				msg := tgbotapi.NewMessage(chatID, "‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–∫–∞:")
				bot.Send(msg)
				return
			case "wait_email":
				state.Email = update.Message.Text
				state.Step = "done"

				telegramID := fmt.Sprint(update.Message.From.ID)
				cfg := config.LoadConfig()
				url, err := payment.CreatePayment(
					state.Amount,
					state.Description,
					telegramID,
					state.SelectedCourse,
					state.Name,
					state.Email,
					cfg.YooKassaShopID,
					cfg.YooKassaSecretKey,
				)

				if err != nil {
					msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É.")
					bot.Send(msg)
					return
				}

				msg := tgbotapi.NewMessage(chatID, "üí≥ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n"+url)
				bot.Send(msg)
				return
			}
		}

		switch update.Message.Text {
		case "/start":
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç üëã –º–µ–Ω—è –∑–æ–≤—É—Ç –Æ–ª–∏—è, –º–Ω–µ 39 –ª–µ—Ç.\n\n"+
				"–õ—é–±–ª—é —Å–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ üí™üèº –∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ üçΩÔ∏è\n\n"+
				"–û–±—â–∏–π —Å—Ç–∞–∂ –∑–∞–Ω—è—Ç–∏–π ‚Äî 8 –ª–µ—Ç. –°–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é ¬´–§–∏—Ç–Ω–µ—Å-–∑–∞–Ω—è—Ç–∏—è –≤–æ –≤—Ä–µ–º—è –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ä–æ–¥–æ–≤¬ª.\n\n"+
				"–ë–ª–∞–≥–æ–¥–∞—Ä—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø–∏—Ç–∞–Ω–∏—é –¥–æ–±–∏–ª–∞—Å—å —Å–≤–æ–µ–π –ª—É—á—à–µ–π —Ñ–æ—Ä–º—ã, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–Ω–µ –¥–µ—Ä–∂–∞—Ç—å —Ç–µ–ª–æ –≤ —Ç–æ–Ω—É—Å–µ.\n\n"+
				"–í —ç—Ç–æ–º –±–æ—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –º–æ–∏ —Å–±–æ—Ä–Ω–∏–∫–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø—Ä–æ—Å—Ç—ã—Ö –∏ –≤–∫—É—Å–Ω—ã—Ö –±–ª—é–¥, –±–ª–∞–≥–æ–¥–∞—Ä—è –∫–æ—Ç–æ—Ä—ã–º —è –ø–æ–ª—É—á–∏–ª–∞ –ø–æ–¥—Ç—è–Ω—É—Ç—É—é —Ñ–∏–≥—É—Ä—É.")
			button := tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("üìö –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã", "show_courses"),
				),
			)
			msg.ReplyMarkup = button
			bot.Send(msg)

		case "/exit":
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ë–æ—Ç –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è. –ù–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, –æ–Ω –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")
			bot.Send(msg)

		default:
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–Ø —Ç–∞–∫–æ–µ –Ω–µ –ø–æ–Ω–∏–º–∞—é, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É.")
			bot.Send(msg)
		}
	}

	if update.CallbackQuery != nil {
		chatID := update.CallbackQuery.Message.Chat.ID
		data := update.CallbackQuery.Data

		switch data {
		case "show_courses":
			buttons := tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("üìó –°–±–æ—Ä–Ω–∏–∫ –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–≤—Ç—Ä–∞–∫–æ–≤", "course_2"),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("üìò –ö–Ω–∏–≥–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤", "course_1"),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("üìï –ö–Ω–∏–≥–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ + –°–±–æ—Ä–Ω–∏–∫ –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–≤—Ç—Ä–∞–∫–æ–≤", "course_3"),
				),
			)
			msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–±–æ—Ä–Ω–∏–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:")
			msg.ReplyMarkup = buttons
			bot.Send(msg)

		case "course_1", "course_2", "course_3":
			var courseDescription string
			switch data {
			case "course_2":
				courseDescription = "üìó –°–±–æ—Ä–Ω–∏–∫ –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–≤—Ç—Ä–∞–∫–æ–≤\nüí∞ –¶–µ–Ω–∞: 399‚ÇΩ"
			case "course_1":
				courseDescription = "üìò –ö–Ω–∏–≥–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤\nüí∞ –¶–µ–Ω–∞: 599‚ÇΩ"
			case "course_3":
				courseDescription = "üìï –ö–Ω–∏–≥–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ + –°–±–æ—Ä–Ω–∏–∫ –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–≤—Ç—Ä–∞–∫–æ–≤\nüí∞ –¶–µ–Ω–∞: 799‚ÇΩ"
			}

			buttons := tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("üí≥ –ó–∞–±—Ä–∞—Ç—å", "buy_"+data),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "show_courses"),
				),
			)
			msg := tgbotapi.NewMessage(chatID, courseDescription)
			msg.ReplyMarkup = buttons
			bot.Send(msg)

		default:
			if len(data) > 4 && data[:4] == "buy_" {
				course := data[4:]
				var amount, desc string

				switch course {
				case "course_2":
					amount = "399.00"
					desc = "–°–±–æ—Ä–Ω–∏–∫ –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–≤—Ç—Ä–∞–∫–æ–≤"
				case "course_1":
					amount = "599.00"
					desc = "–ö–Ω–∏–≥–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤"
				case "course_3":
					amount = "1.00"
					desc = "–ö–Ω–∏–≥–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ + –°–±–æ—Ä–Ω–∏–∫ –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–≤—Ç—Ä–∞–∫–æ–≤"
				default:
					return
				}

				UserStates[chatID] = &UserState{
					Step:           "wait_name",
					SelectedCourse: course,
					Amount:         amount,
					Description:    desc,
				}

				msg := tgbotapi.NewMessage(chatID, "üßæ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —á–µ–∫–∞:")
				bot.Send(msg)
			}
		}
	}
}
